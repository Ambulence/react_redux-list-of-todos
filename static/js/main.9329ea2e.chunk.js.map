{"version":3,"sources":["types/Status.ts","features/currentTodo.ts","features/filter.ts","features/todos.ts","app/store.ts","app/hooks.ts","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","api.ts","components/Loader/Loader.tsx","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["Status","actions","todo","type","payload","currentTodoReducer","state","action","status","query","initialState","ALL","filterReducer","loadTodos","hasError","isLoading","todos","todosReducer","rootReducer","combineReducers","currentTodo","filter","store","createStore","composeWithDevTools","applyMiddleware","thunk","useAppDispatch","useDispatch","useAppSelector","useSelector","TodoList","dispatch","visibleTodos","filterType","ACTIVE","completed","COMPLETED","title","toLowerCase","includes","getVisibleTodos","length","className","map","id","classNames","onClick","currentAction","handleOnSelect","TodoFilter","handleQuery","newQuery","filterAction","value","onChange","event","newStatus","target","Object","values","placeholder","style","pointerEvents","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","getUser","userId","Loader","TodoModal","useState","setLoaded","user","setUser","getUserFromServer","a","userFromServer","useEffect","TodoAction","href","email","name","App","getTodosFromServer","todosFromServer","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.9329ea2e.chunk.js","sourcesContent":["export enum Status {\n  ALL = 'All',\n  ACTIVE = 'Active',\n  COMPLETED = 'Completed',\n}\n","import { Todo } from '../types/Todo';\n\ntype RemoveAction = { type: 'currentTodo/REMOVE' };\n\ntype SetAction = {\n  type: 'currentTodo/SET';\n  payload: Todo;\n};\n\nconst removeTodo = (): RemoveAction => ({ type: 'currentTodo/REMOVE' });\n\nconst setTodo = (todo: Todo): SetAction => ({\n  type: 'currentTodo/SET',\n  payload: todo,\n});\n\nexport const actions = { setTodo, removeTodo };\n\ntype State = Todo | null;\ntype Action = SetAction | RemoveAction;\n\nconst currentTodoReducer = (\n  state: State = null,\n  action: Action,\n): State => {\n  switch (action.type) {\n    case 'currentTodo/SET':\n      return action.payload;\n\n    case 'currentTodo/REMOVE':\n      return null;\n\n    default:\n      return state;\n  }\n};\n\nexport default currentTodoReducer;\n","import { Status } from '../types/Status';\n\ntype SetStatusAction = {\n  type: 'filter/setStatus';\n  payload: Status;\n};\n\ntype SetQueryAction = {\n  type: 'filter/setQuery';\n  payload: string;\n};\n\ntype ClearQueryAction = {\n  type: 'filter/clearQuery'\n};\n\ntype Action = SetStatusAction\n| SetQueryAction\n| ClearQueryAction;\n\nconst setStatus = (status: Status): SetStatusAction => ({\n  type: 'filter/setStatus',\n  payload: status,\n});\n\nconst setQuery = (query: string): SetQueryAction => ({\n  type: 'filter/setQuery',\n  payload: query,\n});\n\nconst clearQuery = (): ClearQueryAction => ({\n  type: 'filter/clearQuery',\n});\n\nexport const actions = { setStatus, setQuery, clearQuery };\n\ntype State = {\n  status: Status,\n  query: string;\n};\n\nconst initialState = {\n  status: Status.ALL,\n  query: '',\n};\n\nconst filterReducer = (\n  state: State = initialState,\n  action: Action,\n): State => {\n  switch (action.type) {\n    case 'filter/setStatus':\n      return {\n        ...state,\n        status: action.payload,\n      };\n\n    case 'filter/setQuery':\n      return {\n        ...state,\n        query: action.payload,\n      };\n\n    case 'filter/clearQuery':\n      return {\n        ...state,\n        query: '',\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default filterReducer;\n","import { Todo } from '../types/Todo';\n\ntype SetTodoAction = {\n  type: 'todos/setTodos';\n  payload: Todo[];\n};\n\ntype SetErrorAction = {\n  type: 'todos/setError';\n  payload: boolean;\n};\n\ntype SetIsLoadingAction = {\n  type: 'todos/setIsLoading';\n  payload: boolean;\n};\n\ntype Action = SetTodoAction\n| SetErrorAction\n| SetIsLoadingAction;\n\nconst setTodos = (loadTodos: Todo[]): SetTodoAction => ({\n  type: 'todos/setTodos',\n  payload: loadTodos,\n});\n\nconst setError = (hasError: boolean): SetErrorAction => ({\n  type: 'todos/setError',\n  payload: hasError,\n});\n\nconst setLoading = (isLoading: boolean): SetIsLoadingAction => ({\n  type: 'todos/setIsLoading',\n  payload: isLoading,\n});\n\nexport const actions = { setTodos, setError, setLoading };\n\nexport type State = {\n  todos: Todo[],\n  hasError: boolean,\n  isLoading: boolean,\n};\n\nconst initialState = {\n  todos: [],\n  hasError: false,\n  isLoading: false,\n};\n\nconst todosReducer = (\n  state: State = initialState,\n  action: Action,\n): State => {\n  switch (action.type) {\n    case 'todos/setTodos':\n      return {\n        ...state,\n        todos: [...action.payload],\n      };\n\n    case 'todos/setError':\n      return {\n        ...state,\n        hasError: action.payload,\n      };\n\n    case 'todos/setIsLoading':\n      return {\n        ...state,\n        isLoading: action.payload,\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default todosReducer;\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport currentTodoReducer from '../features/currentTodo';\nimport filterReducer from '../features/filter';\nimport todosReducer from '../features/todos';\n\nconst rootReducer = combineReducers({\n  currentTodo: currentTodoReducer,\n  filter: filterReducer,\n  todos: todosReducer,\n});\n\n// The `store` is passed to the Provider in `/src/index.tsx`\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, RootState } from './store';\n\nexport const useAppDispatch: () => AppDispatch = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","/* eslint-disable max-len */\nimport React from 'react';\nimport classNames from 'classnames';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions as currentAction } from '../../features/currentTodo';\nimport { Todo } from '../../types/Todo';\nimport { Status } from '../../types/Status';\nimport { State } from '../../features/todos';\n\nconst getVisibleTodos = (\n  todos: Todo[],\n  filterType: Status,\n  query: string,\n): Todo[] => {\n  let visibleTodos: Todo[] = [...todos];\n\n  switch (filterType) {\n    case Status.ACTIVE:\n      visibleTodos = visibleTodos.filter(todo => !todo.completed);\n      break;\n\n    case Status.COMPLETED:\n      visibleTodos = visibleTodos.filter(todo => todo.completed);\n      break;\n\n    default:\n      break;\n  }\n\n  return visibleTodos.filter(\n    todo => todo.title.toLowerCase().includes(\n      query.toLowerCase(),\n    ),\n  );\n};\n\nexport const TodoList: React.FC = () => {\n  const { todos } = useAppSelector<State>(state => state.todos);\n  const filter = useAppSelector(state => state.filter);\n  const currentTodo = useAppSelector(state => state.currentTodo);\n  const dispatch = useAppDispatch();\n\n  const visibleTodos = getVisibleTodos(todos, filter.status, filter.query);\n\n  const handleOnSelect = (todo: Todo) => {\n    dispatch(currentAction.setTodo(todo));\n  };\n\n  return (\n    <>\n      {todos.length === 0\n        ? (\n          <p className=\"notification is-warning\">\n            There are no todos matching current filter criteria\n          </p>\n        ) : (\n          <table className=\"table is-narrow is-fullwidth\">\n            <thead>\n              <tr>\n                <th>#</th>\n                <th>\n                  <span className=\"icon\">\n                    <i className=\"fas fa-check\" />\n                  </span>\n                </th>\n                <th>Title</th>\n                <th> </th>\n              </tr>\n            </thead>\n\n            <tbody>\n              {visibleTodos.map((todo) => {\n                const {\n                  id,\n                  title,\n                  completed,\n                } = todo;\n\n                return (\n                  <tr\n                    data-cy=\"todo\"\n                    key={id}\n                  >\n                    <td className=\"is-vcentered\">\n                      {id}\n                    </td>\n                    <td className=\"is-vcentered\">\n                      {completed && (\n                        <span className=\"icon\" data-cy=\"iconCompleted\">\n                          <i className=\"fas fa-check\" />\n                        </span>\n                      )}\n                    </td>\n\n                    <td className=\"is-vcentered is-expanded\">\n                      <p className={classNames(\n                        {\n                          'has-text-success': completed,\n                          'has-text-danger': !completed,\n                        },\n                      )}\n                      >\n                        {title}\n                      </p>\n                    </td>\n\n                    <td className=\"has-text-right is-vcentered\">\n                      <button\n                        data-cy=\"selectButton\"\n                        className=\"button\"\n                        type=\"button\"\n                        onClick={() => handleOnSelect(todo)}\n                      >\n                        <span className=\"icon\">\n                          <i className={classNames('far', {\n                            'fa-eye': !currentTodo,\n                            'fa-eye-slash': currentTodo,\n                          })}\n                          />\n                        </span>\n                      </button>\n                    </td>\n                  </tr>\n                );\n              })}\n            </tbody>\n          </table>\n        )}\n    </>\n  );\n};\n","import React from 'react';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions as filterAction } from '../../features/filter';\nimport { Status } from '../../types/Status';\n\nexport const TodoFilter: React.FC = () => {\n  const { query, status } = useAppSelector(state => state.filter);\n  const dispatch = useAppDispatch();\n\n  const handleStatus = (newStatus: Status) => {\n    dispatch(filterAction.setStatus(newStatus));\n  };\n\n  const handleQuery = (newQuery: string) => {\n    dispatch(filterAction.setQuery(newQuery));\n  };\n\n  return (\n    <form className=\"field has-addons\">\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            className=\"select-type\"\n            data-cy=\"statusSelect\"\n            value={status}\n            onChange={(event) => handleStatus(event.target.value as Status)}\n          >\n            {Object.values(Status).map((filterType) => (\n              <option key={filterType} value={filterType}>{filterType}</option>\n            ))}\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={query}\n          onChange={(event) => handleQuery(event.target.value)}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        {query && (\n          <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n            <button\n              data-cy=\"clearSearchButton\"\n              aria-label=\"Mute volume\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={() => handleQuery('')}\n            />\n          </span>\n        )}\n\n      </p>\n    </form>\n  );\n};\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useEffect, useState } from 'react';\nimport classNames from 'classnames';\nimport { Loader } from '../Loader';\nimport { useAppDispatch } from '../../app/hooks';\nimport { actions as TodoAction } from '../../features/currentTodo';\nimport { getUser } from '../../api';\nimport { User } from '../../types/User';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  currentTodo: Todo;\n};\n\nexport const TodoModal: React.FC<Props> = ({ currentTodo }) => {\n  const [isLoading, setLoaded] = useState(false);\n  const [user, setUser] = useState<User | null>(null);\n  const dispatch = useAppDispatch();\n\n  const {\n    id,\n    userId,\n    completed,\n    title,\n  } = currentTodo;\n\n  const getUserFromServer = async () => {\n    try {\n      const userFromServer = await getUser(userId);\n\n      setUser(userFromServer);\n    } finally {\n      setLoaded(false);\n    }\n  };\n\n  useEffect(() => {\n    getUserFromServer();\n  }, []);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {isLoading && (\n        <Loader />\n      )}\n\n      {!isLoading && (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${id}`}\n            </div>\n\n            <button\n              type=\"button\"\n              aria-label=\"Mute volume\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={() => dispatch(TodoAction.removeTodo())}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              <strong className={classNames({\n                'has-text-success': completed,\n                'has-text-danger': !completed,\n              })}\n              >\n                {completed\n                  ? 'Done'\n                  : 'Planned'}\n              </strong>\n\n              {' by '}\n\n              <a href={`mailto:${user?.email}`}>\n                {user?.name}\n              </a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React, { useEffect } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { useAppDispatch, useAppSelector } from './app/hooks';\nimport { getTodos } from './api';\nimport { actions as TodoAction } from './features/todos';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\n\nexport const App: React.FC = () => {\n  const { todos, currentTodo } = useAppSelector(state => state);\n  const dispatch = useAppDispatch();\n  const { isLoading } = todos;\n\n  const getTodosFromServer = async () => {\n    try {\n      const todosFromServer = await getTodos();\n\n      dispatch(TodoAction.setTodos(todosFromServer));\n    } catch {\n      dispatch(TodoAction.setError(false));\n    } finally {\n      dispatch(TodoAction.setLoading(true));\n    }\n  };\n\n  useEffect(() => {\n    getTodosFromServer();\n  }, []);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter />\n            </div>\n\n            <div className=\"block\">\n              {isLoading\n                ? (\n                  <TodoList />\n                ) : (\n                  <Loader />\n                )}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {currentTodo && (\n        <TodoModal currentTodo={currentTodo} />\n      )}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport { store } from './app/store';\nimport { App } from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}